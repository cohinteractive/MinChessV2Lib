package com.ohinteractive.minchessv2lib.util;

public class Bitboard {
    
    public static final int FILE = 0;
	public static final int RANK = 1;
	public static final int FORWARD_DIAGONAL = 2;
	public static final int BACKWARD_DIAGONAL = 3;
	public static final int CASTLE_PLAYER0 = 4;
	public static final int CASTLE_PLAYER1 = 5;
	public static final int FORWARD_RANKS_PLAYER0 = 6;
	public static final int FORWARD_RANKS_PLAYER1 = 7;
	public static final int KING_BACK_RANK_BLOCK_PLAYER0 = 8;
	public static final int KING_BACK_RANK_BLOCK_PLAYER1 = 9;
	public static final int ROOK_BACK_RANK_PROTECT_PLAYER0 = 10;
	public static final int ROOK_BACK_RANK_PROTECT_PLAYER1 = 11;
	public static final int PAWN_SHIELD_QUEENSIDE_CLOSE_PLAYER0 = 12;
	public static final int PAWN_SHIELD_QUEENSIDE_CLOSE_PLAYER1 = 13;
	public static final int PAWN_SHIELD_KINGSIDE_CLOSE_PLAYER0 = 14;
	public static final int PAWN_SHIELD_KINGSIDE_CLOSE_PLAYER1 = 15;
	public static final int PAWN_SHIELD_QUEENSIDE_FAR_PLAYER0 = 16;
	public static final int PAWN_SHIELD_QUEENSIDE_FAR_PLAYER1 = 17;
	public static final int PAWN_SHIELD_KINGSIDE_FAR_PLAYER0 = 18;
	public static final int PAWN_SHIELD_KINGSIDE_FAR_PLAYER1 = 19;
	public static final int PAWN_STORM_QUEENSIDE_CLOSE_PLAYER0 = 20;
	public static final int PAWN_STORM_QUEENSIDE_CLOSE_PLAYER1 = 21;
	public static final int PAWN_STORM_KINGSIDE_CLOSE_PLAYER0 = 22;
	public static final int PAWN_STORM_KINGSIDE_CLOSE_PLAYER1 = 23;
	public static final int PAWN_STORM_QUEENSIDE_FAR_PLAYER0 = 24;
	public static final int PAWN_STORM_QUEENSIDE_FAR_PLAYER1 = 25;
	public static final int PAWN_STORM_KINGSIDE_FAR_PLAYER0 = 26;
	public static final int PAWN_STORM_KINGSIDE_FAR_PLAYER1 = 27;
	public static final int KING_START_POSITION_PLAYER0 = 28;
	public static final int KING_START_POSITION_PLAYER1 = 29;
	public static final int QUEEN_START_POSITION_PLAYER0 = 30;
	public static final int QUEEN_START_POSITION_PLAYER1 = 31;
	public static final int ROOK_START_POSITION_PLAYER0 = 32;
	public static final int ROOK_START_POSITION_PLAYER1 = 33;
	public static final int BISHOP_START_POSITION_PLAYER0 = 34;
	public static final int BISHOP_START_POSITION_PLAYER1 = 35;
	public static final int KNIGHT_START_POSITION_PLAYER0 = 36;
	public static final int KNIGHT_START_POSITION_PLAYER1= 37;
	public static final int KING_RING_PLAYER0 = 38;
	public static final int KING_RING_PLAYER1 = 39;
	public static final int SQUARE_COLOR_LIGHT = 40;
	public static final int SQUARE_COLOR_DARK = 41;
	public static final int ENPASSANT_SQUARES_PLAYER0 = 42;
	public static final int ENPASSANT_SQUARES_PLAYER1 = 43;
	public static final int PASSED_PAWNS_FILES_PLAYER0 = 44;
	public static final int PASSED_PAWNS_FILES_PLAYER1 = 45;
	public static final int LEAP_ATTACKS = 46;
	public static final int KING_ATTACKS = 47;
	public static final int PAWN_ATTACKS_PLAYER0 = 48;
	public static final int PAWN_ATTACKS_PLAYER1 = 49;
	public static final int PAWN_ADVANCE_1_PLAYER0 = 50;
	public static final int PAWN_ADVANCE_1_PLAYER1 = 51;
	public static final int PAWN_ADVANCE_2_PLAYER0 = 52;
	public static final int PAWN_ADVANCE_2_PLAYER1 = 53;
	public static final int RANK_FILE_ATTACKS = 54;
	public static final int DIAGONAL_ATTACKS = 55;

	public static final long[][] BB;

	static {
		long[][] tempBB = {
			{// FILE 0
				0x0101010101010101L, 0x0202020202020202L, 0x0404040404040404L, 0x0808080808080808L,
				0x1010101010101010L, 0x2020202020202020L, 0x4040404040404040L, 0x8080808080808080L
			},
			{// RANK 1
				0x00000000000000ffL, 0x000000000000ff00L, 0x0000000000ff0000L, 0x00000000ff000000L,
				0x000000ff00000000L, 0x0000ff0000000000L, 0x00ff000000000000L, 0xff00000000000000L
			},
			{// FORWARD_DIAGONAL 2
				0x8040201008040201L, 0x0080402010080402L, 0x0000804020100804L, 0x0000008040201008L, 0x0000000080402010L, 0x0000000000804020L, 0x0000000000008040L, 0x0000000000000080L,
				0x4020100804020100L, 0x8040201008040201L, 0x0080402010080402L, 0x0000804020100804L, 0x0000008040201008L, 0x0000000080402010L, 0x0000000000804020L, 0x0000000000008040L,
				0x2010080402010000L, 0x4020100804020100L, 0x8040201008040201L, 0x0080402010080402L, 0x0000804020100804L, 0x0000008040201008L, 0x0000000080402010L, 0x0000000000804020L,
				0x1008040201000000L, 0x2010080402010000L, 0x4020100804020100L, 0x8040201008040201L, 0x0080402010080402L, 0x0000804020100804L, 0x0000008040201008L, 0x0000000080402010L,
				0x0804020100000000L, 0x1008040201000000L, 0x2010080402010000L, 0x4020100804020100L, 0x8040201008040201L, 0x0080402010080402L, 0x0000804020100804L, 0x0000008040201008L,
				0x0402010000000000L, 0x0804020100000000L, 0x1008040201000000L, 0x2010080402010000L, 0x4020100804020100L, 0x8040201008040201L, 0x0080402010080402L, 0x0000804020100804L,
				0x0201000000000000L, 0x0402010000000000L, 0x0804020100000000L, 0x1008040201000000L, 0x2010080402010000L, 0x4020100804020100L, 0x8040201008040201L, 0x0080402010080402L,
				0x0100000000000000L, 0x0201000000000000L, 0x0402010000000000L, 0x0804020100000000L, 0x1008040201000000L, 0x2010080402010000L, 0x4020100804020100L, 0x8040201008040201L
			},
			{// BACKWARD_DIAGONAL 3
				0x0000000000000001L, 0x0000000000000102L, 0x0000000000010204L, 0x0000000001020408L, 0x0000000102040810L, 0x0000010204081020L, 0x0001020408102040L, 0x0102040810204080L,
				0x0000000000000102L, 0x0000000000010204L, 0x0000000001020408L, 0x0000000102040810L, 0x0000010204081020L, 0x0001020408102040L, 0x0102040810204080L, 0x0204081020408000L,
				0x0000000000010204L, 0x0000000001020408L, 0x0000000102040810L, 0x0000010204081020L, 0x0001020408102040L, 0x0102040810204080L, 0x0204081020408000L, 0x0408102040800000L,
				0x0000000001020408L, 0x0000000102040810L, 0x0000010204081020L, 0x0001020408102040L, 0x0102040810204080L, 0x0204081020408000L, 0x0408102040800000L, 0x0810204080000000L,
				0x0000000102040810L, 0x0000010204081020L, 0x0001020408102040L, 0x0102040810204080L, 0x0204081020408000L, 0x0408102040800000L, 0x0810204080000000L, 0x1020408000000000L,
				0x0000010204081020L, 0x0001020408102040L, 0x0102040810204080L, 0x0204081020408000L, 0x0408102040800000L, 0x0810204080000000L, 0x1020408000000000L, 0x2040800000000000L,
				0x0001020408102040L, 0x0102040810204080L, 0x0204081020408000L, 0x0408102040800000L, 0x0810204080000000L, 0x1020408000000000L, 0x2040800000000000L, 0x4080000000000000L,
				0x0102040810204080L, 0x0204081020408000L, 0x0408102040800000L, 0x0810204080000000L, 0x1020408000000000L, 0x2040800000000000L, 0x4080000000000000L, 0x8000000000000000L
			},
			{// CASTLE_PLAYER0 4
				0x0000000000000060L, 0x000000000000000eL
			},
			{// CASTLE_PLAYER1 5
				0x6000000000000000L, 0x0e00000000000000L
			},
			{// FORWARD_RANKS_PLAYER0 6
				0xffffffffffffff00L, 0xffffffffffff0000L, 0xffffffffff000000L, 0xffffffff00000000L,
				0xffffff0000000000L, 0xffff000000000000L, 0xff00000000000000L, 0x0000000000000000L
			},
			{// FORWARD_RANKS_PLAYER1 7
				0x0000000000000000L, 0x00000000000000ffL, 0x000000000000ffffL, 0x0000000000ffffffL,
				0x00000000ffffffffL, 0x000000ffffffffffL, 0x0000ffffffffffffL,0x00ffffffffffffffL
			},
			{// KING_BACK_RANK_BLOCK_PLAYER0 8
				0x0000000000000000L, 0x0000000000000001L,
				0x0000000000000003L, 0x0000000000000007L,
				0x0000000000000000L, 0x00000000000000c0L,
				0x0000000000000080L, 0x0000000000000000L
			},
			{// KING_BACK_RANK_BLOCK_PLAYER1 9
				0x0000000000000000L, 0x0100000000000000L,
				0x0300000000000000L, 0x0700000000000000L,
				0x0000000000000000L, 0xc000000000000000L,
				0x8000000000000000L, 0x0000000000000000L
			},
			{// ROOK_BACK_RANK_PROTECT_PLAYER0 10
				0x000000000000000eL, 0x000000000000000cL,
				0x0000000000000008L, 0x0000000000000000L,
				0x0000000000000000L, 0x0000000000000000L,
				0x0000000000000020L, 0x0000000000000060L,
			},
			{// ROOK_BACK_RANK_PROTECT_PLAYER1 11
				0x0e00000000000000L, 0x0c00000000000000L,
				0x0800000000000000L, 0x0000000000000000L,
				0x0000000000000000L, 0x0000000000000000L,
				0x2000000000000000L, 0x6000000000000000L
			},
			{// PAWN_SHIELD_QUEENSIDE_CLOSE_PLAYER0 12
				0x0000000000000700L
			},
			{// PAWN_SHIELD_QUEENSIDE_CLOSE_PLAYER1 13
				0x0007000000000000L
			},
			{// PAWN_SHIELD_KINGSIDE_CLOSE_PLAYER0 14
				0x000000000000e000L
			},
			{// PAWN_SHIELD_KINGSIDE_CLOSE_PLAYER1 15
				0x00e0000000000000L
			},
			{// PAWN_SHIELD_QUEENSIDE_FAR_PLAYER0 16
				0x0000000000070000L
			},
			{// PAWN_SHIELD_QUEENSIDE_FAR_PLAYER1 17
				0x0000070000000000L
			},
			{// PAWN_SHIELD_KINGSIDE_FAR_PLAYER0 18
				0x0000000000e00000L
			},
			{// PAWN_SHIELD_KINGSIDE_FAR_PLAYER1 19
				0x0000e00000000000L
			},
			{// PAWN_STORM_QUEENSIDE_CLOSE_PLAYER0 20
				0x0000000000070000L
			},
			{// PAWN_STORM_QUEENSIDE_CLOSE_PLAYER1 21
				0x0000070000000000L
			},
			{// PAWN_STORM_KINGSIDE_CLOSE_PLAYER0 22
				0x0000000000e00000L
			},
			{// PAWN_STORM_KINGSIDE_CLOSE_PLAYER1 23
				0x0000e00000000000L
			},
			{// PAWN_STORM_QUEENSIDE_FAR_PLAYER0 24
				0x0000000007000000L
			},
			{// PAWN_STORM_QUEENSIDE_FAR_PLAYER1 25
				0x0000000700000000L
			},
			{// PAWN_STORM_KINGSIDE_FAR_PLAYER0 26
				0x00000000e0000000L
			},
			{// PAWN_STORM_KINGSIDE_FAR_PLAYER1 27
				0x000000e000000000L
			},
			{// KING_START_POSITION_PLAYER0 28
				0x0000000000000010L
			},
			{// KING_START_POSITION_PLAYER1 29
				0x1000000000000000L
			},
			{// QUEEN_START_POSITION_PLAYER0 30
				0x0000000000000008L
			},
			{// QUEEN_START_POSITION_PLAYER1 31
				0x0800000000000000L
			},
			{// ROOK_START_POSITION_PLAYER0 32
				0x0000000000000081L
			},
			{// ROOK_START_POSITION_PLAYER1 33
				0x8100000000000000L
			},
			{// BISHOP_START_POSITION_PLAYER0 34
				0x0000000000000024L
			},
			{// BISHOP_START_POSITION_PLAYER1 35
				0x2400000000000000L
			},
			{// KNIGHT_START_POSITION_PLAYER0 36
				0x0000000000000042L
			},
			{// KNIGHT_START_POSITION_PLAYER1 37
				0x4200000000000000L
			},
			{// KING_RING_PLAYER0 38
				0x0000000000030303L, 0x0000000000070707L, 0x00000000000e0e0eL, 0x00000000001c1c1cL, 0x0000000000383838L, 0x0000000000707070L, 0x0000000000e0e0e0L, 0x0000000000c0c0c0L,
				0x0000000003030303L, 0x0000000007070707L, 0x000000000e0e0e0eL, 0x000000001c1c1c1cL, 0x0000000038383838L, 0x0000000070707070L, 0x00000000e0e0e0e0L, 0x00000000c0c0c0c0L,
				0x0000000303030300L, 0x0000000707070700L, 0x0000000e0e0e0e00L, 0x0000001c1c1c1c00L, 0x0000003838383800L, 0x0000007070707000L, 0x000000e0e0e0e000L, 0x000000c0c0c0c000L,
				0x0000030303030000L, 0x0000070707070000L, 0x00000e0e0e0e0000L, 0x00001c1c1c1c0000L, 0x0000383838380000L, 0x0000707070700000L, 0x0000e0e0e0e00000L, 0x0000c0c0c0c00000L,
				0x0003030303000000L, 0x0007070707000000L, 0x000e0e0e0e000000L, 0x001c1c1c1c000000L, 0x0038383838000000L, 0x0070707070000000L, 0x00e0e0e0e0000000L, 0x00c0c0c0c0000000L,
				0x0303030300000000L, 0x0707070700000000L, 0x0e0e0e0e00000000L, 0x1c1c1c1c00000000L, 0x3838383800000000L, 0x7070707000000000L, 0xe0e0e0e000000000L, 0xc0c0c0c000000000L,
				0x0303030000000000L, 0x0707070000000000L, 0x0e0e0e0000000000L, 0x1c1c1c0000000000L, 0x3838380000000000L, 0x7070700000000000L, 0xe0e0e00000000000L, 0xc0c0c00000000000L,
				0x0303000000000000L, 0x0707000000000000L, 0x0e0e000000000000L, 0x1c1c000000000000L, 0x3838000000000000L, 0x7070000000000000L, 0xe0e0000000000000L, 0xc0c0000000000000L
			},
			{// KING_RING_PLAYER1 39
				0x0000000000000303L, 0x0000000000000707L, 0x0000000000000e0eL, 0x0000000000001c1cL, 0x0000000000003838L, 0x0000000000007070L, 0x000000000000e0e0L, 0x000000000000c0c0L,
				0x0000000000030303L, 0x0000000000070707L, 0x00000000000e0e0eL, 0x00000000001c1c1cL, 0x0000000000383838L, 0x0000000000707070L, 0x0000000000e0e0e0L, 0x0000000000c0c0c0L,
				0x0000000003030303L, 0x0000000007070707L, 0x000000000e0e0e0eL, 0x000000001c1c1c1cL, 0x0000000038383838L, 0x0000000070707070L, 0x00000000e0e0e0e0L, 0x00000000c0c0c0c0L,
				0x0000000303030300L, 0x0000000707070700L, 0x0000000e0e0e0e00L, 0x0000001c1c1c1c00L, 0x0000003838383800L, 0x0000007070707000L, 0x000000e0e0e0e000L, 0x000000c0c0c0c000L,
				0x0000030303030000L, 0x0000070707070000L, 0x00000e0e0e0e0000L, 0x00001c1c1c1c0000L, 0x0000383838380000L, 0x0000707070700000L, 0x0000e0e0e0e00000L, 0x0000c0c0c0c00000L,
				0x0003030303000000L, 0x0007070707000000L, 0x000e0e0e0e000000L, 0x001c1c1c1c000000L, 0x0038383838000000L, 0x0070707070000000L, 0x00e0e0e0e0000000L, 0x00c0c0c0c0000000L,
				0x0303030300000000L, 0x0707070700000000L, 0x0e0e0e0e00000000L, 0x1c1c1c1c00000000L, 0x3838383800000000L, 0x7070707000000000L, 0xe0e0e0e000000000L, 0xc0c0c0c000000000L,
				0x0303030000000000L, 0x0707070000000000L, 0x0e0e0e0000000000L, 0x1c1c1c0000000000L, 0x3838380000000000L, 0x7070700000000000L, 0xe0e0e00000000000L, 0xc0c0c00000000000L
			},
			{// SQUARE_COLOR_LIGHT 40
				0x55aa55aa55aa55aaL
			},
			{// SQUARE_COLOR_DARK 41
				0xaa55aa55aa55aa55L
			},
			{// ENPASSANT_SQUARES_PLAYER0 42
				0x0000000000ff0000L
			},
			{// ENPASSANT_SQUARES_PLAYER1 43
				0x0000ff0000000000L
			},
			{// PASSED_PAWNS_FILES_PLAYER0 44
				0x0003030303030000L, 0x0007070707070000L, 0x000e0e0e0e0e0000L, 0x001c1c1c1c1c0000L, 0x0038383838380000L, 0x0070707070700000L, 0x00e0e0e0e0e00000L, 0x00c0c0c0c0c00000L
			},
			{// PASSED_PAWNS_FILES_PLAYER1 45
				0x0000030303030300L, 0x0000070707070700L, 0x00000e0e0e0e0e00L, 0x00001c1c1c1c1c00L, 0x0000383838383800L, 0x0000707070707000L, 0x0000e0e0e0e0e000L, 0x0000c0c0c0c0c000L
			},
		};
		BB = new long[64][];
		for(int i = 0; i < 46; i ++) {
			BB[i] = new long[tempBB[i].length];
			System.arraycopy(tempBB[i], 0, BB[i], 0, tempBB[i].length);
		}
		long[] BB_LEAPATTACKS = new long[64];
		long[] BB_KINGATTACKS = new long[64];
		long[][] BB_PAWNATTACKS = new long[2][64];
		long[][] BB_PAWNADVANCE = new long[2][64];
		long[][] BB_PAWNADVANCE2 = new long[2][64];
		long[] BB_RANKFILEATTACKS = new long[64*64];
		long[] BB_DIAGONALATTACKS = new long[64*64];
		int[][] LEAP = { {17, 33}, {10, 18}, {-6, -14}, {-15, -31}, {-17, -33}, {-10, -18}, {6, 14}, {15, 31} };
		int[][] SLIDE = { {8, 16}, {1, 1}, {-8, -16}, {-1, -1}, {9, 17}, {-7, -15}, {-9, -17}, {7, 15} };
		int[][][] PAWN_CAPTURE = { { {7, 15}, {9, 17} }, { {-7, -15}, {-9, -17} } };
		for(int s = 0; s < 64; s ++) {
			int s2 = ((s & 248) << 1) | (s & 7);
			long bb = 0L;
			for(int d = 0; d < 8; d ++) {
				if(((s2 + LEAP[d][1]) & 0x88) == 0) {
					bb |= (1L << (s + LEAP[d][0]));
				}
			}
			BB_LEAPATTACKS[s] = bb;
			bb = 0L;
			for(int d = 0; d < 8; d ++) {
				if(((s2 + SLIDE[d][1]) & 0x88) == 0) {
					bb |= (1L << (s + SLIDE[d][0]));
				}
			}
			BB_KINGATTACKS[s] = bb;
			for(int player = 0; player < 2; player ++) {
				bb = 0L;
				for(int d = 0; d < 2; d ++) {
					if(((s2 + PAWN_CAPTURE[player][d][1]) & 0x88) == 0) {
						bb |= (1L << (s + PAWN_CAPTURE[player][d][0]));
					}
				}
				BB_PAWNATTACKS[player][s] = bb;
				if(player == 0) {
					if((s >>> 3) != 7) {
						BB_PAWNADVANCE[player][s] = (1L << s << 8);
					}
					if((s >>> 3) == 1) {
						BB_PAWNADVANCE2[player][s] = (1L << s << 16);
					}
				} else {
					if((s >>> 3) != 0) {
						BB_PAWNADVANCE[player][s] = (1L << s >>> 8);
					}
					if((s >>> 3) == 6) {
						BB_PAWNADVANCE2[player][s] = (1L << s >>> 16);
					}
				}
			}
			for(int t = 0; t < 64; t ++) {
				long mask = 0L;
				if(s == t) {
					continue;
				}
				int lower = s < t ? s : t;
				int higher = s > t ? s : t;
				if((s >>> 3) == (t >>> 3)) {
					for(int i = lower; i <= higher; i ++) {
						mask |= (1L << i);
					}
					BB_RANKFILEATTACKS[s | (t << 6)] = mask;
				} else {
					if((s & 7) == (t & 7)) {
						for(int i = lower; i <= higher; i += 8) {
							mask |= (1L << i);
						}
						BB_RANKFILEATTACKS[s | (t << 6)] = mask;
					} else {
						int lr = lower >>> 3;
						int lf = lower & 7;
						int hr = higher >>> 3;
						int hf = higher & 7;
						if((s - t) % 9 == 0 && lf < hf) {
							for(int r = lr, f = lf; r < 8 && f < 8 && r <= hr; r ++, f ++) {
								int i = r << 3 | f;
								mask |= (1L << i);
							}
							BB_DIAGONALATTACKS[s | (t << 6)] = mask;
						} else {
							if((s - t) % 7 == 0 && lf > hf) {
								for(int r = lr, f = lf; r < 8 && f >= 0 && r <= hr; r ++, f --) {
									int i = r << 3 | f;
									mask |= (1L << i);
								}
								BB_DIAGONALATTACKS[s | (t << 6)] = mask;
							}
						}
					}
				}
			}
		}
		BB[LEAP_ATTACKS] = new long[BB_LEAPATTACKS.length];
		System.arraycopy(BB_LEAPATTACKS, 0, BB[LEAP_ATTACKS], 0, BB_LEAPATTACKS.length);
		//BB[LEAP_ATTACKS] = Arrays.copyOf(BB_LEAPATTACKS, BB_LEAPATTACKS.length);
		BB[KING_ATTACKS] = new long[BB_KINGATTACKS.length];
		System.arraycopy(BB_KINGATTACKS, 0, BB[KING_ATTACKS], 0, BB_KINGATTACKS.length);
		//BB[KING_ATTACKS] = Arrays.copyOf(BB_KINGATTACKS, BB_KINGATTACKS.length);
		BB[PAWN_ATTACKS_PLAYER0] = new long[BB_PAWNATTACKS[0].length];
		System.arraycopy(BB_PAWNATTACKS[0], 0, BB[PAWN_ATTACKS_PLAYER0], 0, BB_PAWNATTACKS[0].length);
		//BB[PAWN_ATTACKS_PLAYER0] = Arrays.copyOf(BB_PAWNATTACKS[0], BB_PAWNATTACKS[0].length);
		BB[PAWN_ATTACKS_PLAYER1] = new long[BB_PAWNATTACKS[1].length];
		System.arraycopy(BB_PAWNATTACKS[1], 0, BB[PAWN_ATTACKS_PLAYER1], 0, BB_PAWNATTACKS[1].length);
		//BB[PAWN_ATTACKS_PLAYER1] = Arrays.copyOf(BB_PAWNATTACKS[1], BB_PAWNATTACKS[1].length);
		BB[PAWN_ADVANCE_1_PLAYER0] = new long[BB_PAWNADVANCE[0].length];
		System.arraycopy(BB_PAWNADVANCE[0], 0, BB[PAWN_ADVANCE_1_PLAYER0], 0, BB_PAWNADVANCE[0].length);
		//BB[PAWN_ADVANCE_1_PLAYER0] = Arrays.copyOf(BB_PAWNADVANCE[0], BB_PAWNADVANCE[0].length);
		BB[PAWN_ADVANCE_1_PLAYER1] = new long[BB_PAWNADVANCE[1].length]; 
		System.arraycopy(BB_PAWNADVANCE[1], 0, BB[PAWN_ADVANCE_1_PLAYER1], 0, BB_PAWNADVANCE[1].length);
		//BB[PAWN_ADVANCE_1_PLAYER1] = Arrays.copyOf(BB_PAWNADVANCE[1], BB_PAWNADVANCE[1].length);
		BB[PAWN_ADVANCE_2_PLAYER0] = new long[BB_PAWNADVANCE2[0].length];
		System.arraycopy(BB_PAWNADVANCE2[0], 0, BB[PAWN_ADVANCE_2_PLAYER0], 0, BB_PAWNADVANCE2[0].length);
		//BB[PAWN_ADVANCE_2_PLAYER0] = Arrays.copyOf(BB_PAWNADVANCE2[0], BB_PAWNADVANCE2[0].length);
		BB[PAWN_ADVANCE_2_PLAYER1] = new long[BB_PAWNADVANCE2[1].length];
		System.arraycopy(BB_PAWNADVANCE2[1], 0, BB[PAWN_ADVANCE_2_PLAYER1], 0, BB_PAWNADVANCE2[1].length);
		//BB[PAWN_ADVANCE_2_PLAYER1] = Arrays.copyOf(BB_PAWNADVANCE2[1], BB_PAWNADVANCE2[1].length);
		BB[RANK_FILE_ATTACKS] = new long[BB_RANKFILEATTACKS.length];
		System.arraycopy(BB_RANKFILEATTACKS, 0, BB[RANK_FILE_ATTACKS], 0, BB_RANKFILEATTACKS.length);
		//BB[RANK_FILE_ATTACKS] = Arrays.copyOf(BB_RANKFILEATTACKS, BB_RANKFILEATTACKS.length);
		BB[DIAGONAL_ATTACKS] = new long[BB_DIAGONALATTACKS.length];
		System.arraycopy(BB_DIAGONALATTACKS, 0, BB[DIAGONAL_ATTACKS], 0, BB_DIAGONALATTACKS.length);
		//BB[DIAGONAL_ATTACKS] = Arrays.copyOf(BB_DIAGONALATTACKS, BB_DIAGONALATTACKS.length);
    }

	public static void drawBitboard(long bitboard) {
		for(int i = 0; i < 64; i ++) {
			long squareBit = 1L << (i ^ 0x38);
			System.out.print((bitboard & squareBit) != 0 ? "1 " : ". ");
			if((i & 7) == 7) System.out.println();
 		}
	}

    private Bitboard() {}

}

